# Create a Secret to hold the MONGO_INITDB_ROOT_USERNAME/PASSWORD
# so we can enable authentication
apiVersion: v1
kind: Secret
metadata:
  name: mongo-init-credentials
  namespace: mst
type: Opaque
data:
  #echo -n "mongoadmin" | base64
  init.userid: bW9uZ29hZG1pbg==
  #echo -n "adminpassword" | base64
  init.password: YWRtaW5wYXNzd29yZA==

---
# Create a secret to hold a keyfile used to authenticate between replicaset members
# this seems to need to be base64 encoded twice (might not be the case if this
# was an actual file reference as per the examples, but we're using a simple key
# here
apiVersion: v1
kind: Secret
metadata:
  name: mongo-key
  namespace: mst
type: Opaque
data:
  #echo -n "CHANGEMECHANGEMECHANGEME" | base64 | base64
  mongodb-keyfile: UTBoQlRrZEZUVVZEU0VGT1IwVk5SVU5JUVU1SFJVMUYK



---
# Create a service account for Mongo and give it Pod List role
# note this is a ClusterROleBinding - the Mongo Pod will be able
# to list all pods present in the cluster regardless of namespace
# (and this is exactly what it does...see below)
apiVersion: v1
kind: ServiceAccount
metadata:
  name: mongo-serviceaccount
  namespace: mst

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: mongo-mst-serviceaccount-view
  namespace: mst
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: pod-viewer
subjects:
  - kind: ServiceAccount
    name: mongo-serviceaccount
    namespace: mst

---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: pod-viewer
  namespace: mst
rules:

  - apiGroups:
      - policy
    resources:
      - podsecuritypolicies
    verbs:
      - use
    resourceNames:
      - sbt-restricted
      # - gce.privileged

  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - list



---
#Create a Storage Class for Google Container Engine
#Note fstype: xfs isn't supported by GCE yet and the
#Pod startup will hang if you try to specify it.
# kind: StorageClass
# apiVersion: storage.k8s.io/v1beta1
# metadata:
#   namespace: mst
#   name: mongodb-ssd-storage
# provisioner: kubernetes.io/gce-pd
# parameters:
#   type: pd-ssd
# allowVolumeExpansion: true


---
#Headless Service for StatefulSets
apiVersion: v1
kind: Service
metadata:
  name: mongo-db
  namespace: mst
  labels:
    name: mongo-db
spec:
  clusterIP: None
  selector:
    app: mongo
  ports:
    - port: 27017
      targetPort: 27017

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongo-db
  namespace: mst
spec:
  serviceName: mongo-db
  replicas: 3
  selector:
    matchLabels:
      app: mongo
      environment: mst
  template:
    metadata:
      labels:
        # Labels MUST match MONGO_SIDECAR_POD_LABELS
        # and MUST differentiate between other mongo
        # instances in the CLUSTER not just the namespace
        # as the sidecar will search the entire cluster
        # for something to configure
        app: mongo
        environment: mst
    spec:
      #Run the Pod using the service account
      serviceAccountName: mongo-serviceaccount

      # ADDITIONAL
      securityContext:
        runAsUser: 1001
        fsGroup: 1001

      terminationGracePeriodSeconds: 10
      #Prevent a Mongo Replica running on the same node as another (avoid single point of failure)
      # affinity:
      #   podAntiAffinity:
      #     requiredDuringSchedulingIgnoredDuringExecution:
      #     - labelSelector:
      #         matchExpressions:
      #         - key: app
      #           operator: In
      #           values:
      #           - mongo
      #       topologyKey: "kubernetes.io/hostname"
      containers:
        - name: mongo
          image: mongo:4.0.12
          # image: mongo:4.4.1
          # image: mongo:4.4.2
          command:
            #Authentication adapted from https://gist.github.com/thilinapiy/0c5abc2c0c28efe1bbe2165b0d8dc115
            #in order to pass the new admin user id and password in
          - /bin/sh
          - -c
          # mongod --wiredTigerCacheSizeGB 0.5 --replSet rs0 --bind_ip 0.0.0.0 --smallfiles --noprealloc --clusterAuthMode keyFile --keyFile /etc/secrets-volume/mongodb-keyfile --setParameter authenticationMechanisms=SCRAM-SHA-1;
          # mongod --wiredTigerCacheSizeGB 0.5 --replSet rs0 --bind_ip 0.0.0.0 --smallfiles --noprealloc --clusterAuthMode keyFile --keyFile /data/db/secrets-volume/mongodb-keyfile --setParameter authenticationMechanisms=SCRAM-SHA-1;
          - >
            if [ -f /data/db/admin-user.lock ]; then
              echo "KUBERNETES LOG $HOSTNAME- Starting Mongo Daemon with runtime settings (clusterAuthMode)"
              #ensure wiredTigerCacheSize is set within the size of the containers memory limit
              mongod --wiredTigerCacheSizeGB 0.5 --replSet rs0 --bind_ip 0.0.0.0 --smallfiles --noprealloc;
            else
              echo "KUBERNETES LOG $HOSTNAME- Starting Mongo Daemon with setup setting (authMode)"
              mongod --auth;
            fi;
          lifecycle:
              postStart:
                exec:
                  command:
                  - /bin/sh
                  - -c
                  - >
                    if [ ! -f /data/db/admin-user.lock ]; then
                      echo "KUBERNETES LOG $HOSTNAME- no Admin-user.lock file found yet"
                      #replaced simple sleep, with ping and test.
                      while (! mongo --eval "db.adminCommand('ping')"); do sleep 10; echo "KUBERNETES LOG $HOSTNAME - waiting another 10 seconds for mongo to start" >> /data/db/configlog.txt; done;
                      touch /data/db/admin-user.lock
                      if [ "$HOSTNAME" = "mongo-db-0" ]; then
                        echo "KUBERNETES LOG $HOSTNAME- creating admin user ${MONGODB_USERNAME}"
                        mongo --eval "db = db.getSiblingDB('admin'); db.createUser({ user: '${MONGODB_USERNAME}', pwd: '${MONGODB_PASSWORD}', roles: [{ role: 'root', db: 'admin' }]});" >> /data/db/config.log
                      fi;
                      echo "KUBERNETES LOG $HOSTNAME-shutting mongod down for final restart"
                      mongod --shutdown;
                    fi;
          env:
            - name: MONGODB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: mongo-init-credentials
                  key: init.userid
            - name: MONGODB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mongo-init-credentials
                  key: init.password
          ports:
            - containerPort: 27017
          livenessProbe:
            exec:
              command:
              - mongo
              - --eval
              - "db.adminCommand('ping')"
            initialDelaySeconds: 5
            periodSeconds: 60
            timeoutSeconds: 10
          readinessProbe:
            exec:
              command:
              - mongo
              - --eval
              - "db.adminCommand('ping')"
            initialDelaySeconds: 5
            periodSeconds: 60
            timeoutSeconds: 10
          resources:
            requests:
              cpu: 0.5
              memory: "350Mi"
            limits:
              cpu: 0.5
              memory: "1Gi"
          volumeMounts:
            - name: mongo-persistent-storage
              mountPath: /data/db
            - name: mongo-key
              mountPath: /etc/secrets-volume
              # mountPath: /data/db/secrets-volume
              readOnly: true
            # Trick part 1 - This trick is to avoid to give containers write access to root filesystem
            - name: tmp
              mountPath: /tmp
        - name: mongo-sidecar
          image: cvallance/mongo-k8s-sidecar
          env:
            # Sidecar searches for any POD in the CLUSTER with these labels
            # not just the namespace..so we need to ensure the POD is labelled
            # to differentiate it from other PODS in different namespaces
            - name: MONGO_SIDECAR_POD_LABELS
              value: "app=mongo,environment=mst"
            - name: MONGODB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: mongo-init-credentials
                  key: init.userid
            - name: MONGODB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mongo-init-credentials
                  key: init.password
            #don't be fooled by this..it's not your DB that
            #needs specifying, it's the admin DB as that
            #is what you authenticate against with mongo.
            - name: MONGODB_DATABASE
              value: admin
      volumes:
      - name: mongo-key
        secret:
          # defaultMode: 0400
          defaultMode: 0600
          # defaultMode: 0700
          # defaultMode: 0511
          secretName: mongo-key
  volumeClaimTemplates:
    - metadata:
        name: mongo-persistent-storage
        # annotations:
        #   volume.beta.kubernetes.io/storage-class: "mongodb-ssd-storage"
      spec:
        storageClassName: ssd-expandable
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 1Gi
    # Trick part 2 - This trick is to avoid to give containers write access to root filesystem
    - metadata:
        name: tmp
        labels:
          type: ssd
          expandable: "true"
      spec:
        storageClassName: ssd-expandable
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1G
